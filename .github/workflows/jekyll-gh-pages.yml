name: Build, Deploy RPM Repository, and GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Install necessary tools
      - name: Install createrepo-c and gh CLI
        run: |
          sudo apt update
          sudo apt install -y createrepo-c gh

      # Step 3: Create a temporary directory for storing RPMs
      - name: Create directory for RPMs
        run: mkdir -p ~/rpms

      # Step 4: List and download RPMs from other repositories
      - name: Download RPMs from ha-lizard/ha-lizard-rpm-demo
        run: |
          releases=$(gh release list --repo ha-lizard/ha-lizard-rpm-demo --json tagName -q ".[].tagName")
          for release in $releases; do
            echo "Downloading release $release"
            gh release download --repo ha-lizard/ha-lizard-rpm-demo $release --pattern "*.rpm" --dir ~/rpms
          done

      - name: Download RPMs from ha-lizard/iscsi-ha
        run: |
          releases=$(gh release list --repo ha-lizard/iscsi-ha --json tagName -q ".[].tagName")
          for release in $releases; do
            echo "Downloading release $release"
            gh release download --repo ha-lizard/iscsi-ha $release --pattern "*.rpm" --dir ~/rpms
          done

      # Step 5: Prepare the RPM repository (create metadata)
      - name: Prepare RPM Repository
        run: |

          # Create directories for stable and unstable RPMs if they don't exist
          mkdir -p ~/stable ~/unstable

          # Iterate over all RPM files in the rpms directory
          for rpm in ~/rpms/*.rpm; do
            # Check if the filename contains "-rc", "-RC", "-beta", or "-BETA"
            if [[ "$rpm" =~ -(rc|RC|beta|BETA) ]]; then
              # Move the unstable RPM to the unstable directory
              mv "$rpm" ~/unstable/
            else
              # Move the stable RPM to the stable directory
              mv "$rpm" ~/stable/
            fi
          done

          createrepo_c ~/stable
          createrepo_c ~/unstable

          # Generate a JSON file for stable RPMs
          ls -1 ~/stable/*.rpm > _data/stable_rpms.txt
          jq -nR '[inputs | {"name": .}]' < _data/stable_rpms.txt > _data/stable_rpms.json
          rm _data/stable_rpms.txt

          # Generate a JSON file for unstable RPMs
          ls -1 ~/unstable/*.rpm > _data/unstable_rpms.txt
          jq -nR '[inputs | {"name": .}]' < _data/unstable_rpms.txt > _data/unstable_rpms.json
          rm _data/unstable_rpms.txt


      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      # Step 7: Copy RPMs and metadata to the _site directory for GitHub Pages
      - name: Copy RPMs and metadata to _site directory
        run: |
          sudo cp -R ~/stable ~/unstable ./_site/
          find ./_site/

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job for GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
